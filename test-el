#!/usr/bin/env ruby

require 'optparse'

class App
  def run(args)
    parse_args(args)
    command = build_command
    STDERR.puts "++ #{command.map{|s| '"'+s+'"'}.join(' ')}" if @verbose
    exec *command
  end

  private

  def initialize
    @options = {}
  end

  attr_reader :options

  def parse_args(args)
    @emacs = find_emacs
    @load_path = []
    parser = OptionParser.new do |parser|
      parser.banner = "Usage: #$0 [options] FILES ..."
      parser.on('-e', '--emacs PATH', "Path to emacs. Default: #{find_emacs}") { |path| @emacs = path }
      parser.on('-I', '--include PATH', 'Add PATH to the emacs load path.') { |path| @load_path << path }
      parser.on('-v', '--verbose', 'Show the emacs invocation.') { @verbose = true }
    end
    parser.parse!(args)
    find_real_emacs
    @files = args
  end

  def find_emacs
    emacs = ENV['EMACS'] and
      return emacs

    ['~/Applications', '/Applications'].each do |app_path|
      ['Aquamacs.app/Contents/MacOS/Aquamacs', 'Aquamacs Emacs.app/Contents/MacOS/Aquamacs Emacs'].each do |executable_path|
        path = File.expand_path("#{app_path}/#{executable_path}")
        return path if File.exist?(path)
      end
    end

    'emacs'
  end

  def find_real_emacs
    # If the root of an Aquamacs bundle was given, find the emacs inside.
    if File.directory?(@emacs) && @emacs =~ /\.app\/*\z/
      ['Contents/MacOS/Aquamacs', 'Contents/MacOS/Aquamacs Emacs'].each do |path|
        path = "#@emacs/#{path}"
        if File.exist?(path)
          @emacs = path
          break
        end
      end
    end
  end

  def build_command
    command = [@emacs, '-Q', '-batch']
    @load_path.each{|dir| command << '-L' << dir}
    command << '-eval' << bootstrap_code
    @files.each{|path| command << '-l' << path}
    command << '-f' << 'test:run'
  end

  def bootstrap_code
    me = File.expand_path(__FILE__)
    while File.symlink?(me)
      target = File.readlink(me)
      me = File.expand_path(target, File.dirname(me))
    end
    dir = File.dirname(me)

    # If we can't find test.el on the load path, try looking relative
    # to this script.
    <<-EOS.gsub(/\s+/m, ' ').strip
      (progn
        (condition-case tester:data
            (require 'test)
          (file-error
            (load "#{dir.gsub(/"/, '\\\&')}/test" nil t))))
    EOS
  end
end

App.new.run(ARGV)
